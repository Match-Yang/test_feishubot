name: PR Notification to Feishu

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - main
    paths:
      - 'uikit/**'
      - 'core_products/zim/**'

jobs:
  notify:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load user mapping
        id: mapping
        run: |
          while IFS=: read -r github_user feishu_id || [ -n "$github_user" ]; do
            [[ $github_user =~ ^#.*$ || -z $github_user ]] && continue
            github_user=$(echo $github_user | tr -d ' "')
            feishu_id=$(echo $feishu_id | tr -d ' "')
            echo "FEISHU_${github_user}=${feishu_id}" >> $GITHUB_ENV
          done < .github/configs/user_mapping.yml

      - name: Send notification
        env:
          WEBHOOK_UIKIT: ${{ secrets.WEBHOOK_UIKIT }}
          API_KEY_UIKIT: ${{ secrets.API_KEY_UIKIT }}
          WEBHOOK_ZIM: ${{ secrets.WEBHOOK_ZIM }}
          API_KEY_ZIM: ${{ secrets.API_KEY_ZIM }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 获取PR信息
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          GITHUB_USER="${{ github.event.pull_request.user.login }}"
          
          FEISHU_USER_VAR="FEISHU_${GITHUB_USER}"
          FEISHU_USER_ID="${!FEISHU_USER_VAR:-$GITHUB_USER}"
          
          if [[ "${{ github.event.action }}" == "opened" ]]; then
            STATUS="新建PR"
          elif [[ "${{ github.event.action }}" == "synchronize" ]]; then
            STATUS="更新PR"
          elif [[ "${{ github.event.action }}" == "closed" ]]; then
            if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
              STATUS="合并PR"
            else
              STATUS="关闭PR"
            fi
          fi
          
          MESSAGE_CARD=$(cat << EOF
          {
            "msg_type": "interactive",
            "card": {
              "config": {
                "wide_screen_mode": true
              },
              "header": {
                "title": {
                  "tag": "plain_text",
                  "content": "${PR_TITLE}"
                },
                "template": "blue"
              },
              "elements": [
                {
                  "tag": "div",
                  "text": {
                    "tag": "lark_md",
                    "content": "**状态**: ${STATUS}\n**创建者**: <at id=${FEISHU_USER_ID}></at>\n**描述**: ${PR_BODY:-无}"
                  }
                },
                {
                  "tag": "action",
                  "actions": [
                    {
                      "tag": "button",
                      "text": {
                        "tag": "plain_text",
                        "content": "查看 PR"
                      },
                      "url": "${PR_URL}",
                      "type": "default"
                    }
                  ]
                }
              ]
            }
          }
          EOF
          )
          
          changed_files=$(gh api "repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" --jq '.[].filename')
          
          notify_uikit=false
          notify_zim=false
          
          while IFS= read -r file; do
            if [[ $file == uikit/* ]]; then
              notify_uikit=true
            elif [[ $file == core_products/zim/* ]]; then
              notify_zim=true
            fi
          done <<< "$changed_files"
          
          send_notification() {
            local webhook_url="$1"
            local api_key="$2"
            
            # 生成时间戳
            timestamp=$(date +%s)
            
            # 生成签名字符串
            string_to_sign="${timestamp}\n${api_key}"
            
            # 使用 API_KEY 生成签名
            sign=$(echo -n "$string_to_sign" | openssl base64 -A | openssl dgst -sha256 -hmac "$api_key" -binary | openssl base64 -A)
            
            # 发送请求
            curl -X POST \
                 -H "Content-Type: application/json" \
                 -H "X-Lark-Request-Timestamp: ${timestamp}" \
                 -H "X-Lark-Sign: ${sign}" \
                 -d "$MESSAGE_CARD" \
                 "$webhook_url"
          }
          
          if [[ $notify_uikit == true && -n $WEBHOOK_UIKIT && -n $API_KEY_UIKIT ]]; then
            send_notification "$WEBHOOK_UIKIT" "$API_KEY_UIKIT"
          fi
          
          if [[ $notify_zim == true && -n $WEBHOOK_ZIM && -n $API_KEY_ZIM ]]; then
            send_notification "$WEBHOOK_ZIM" "$API_KEY_ZIM"
          fi