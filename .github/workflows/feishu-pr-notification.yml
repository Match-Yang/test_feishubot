name: PR Notification to Feishu

on:
  pull_request_review:
    types: [edited, dismissed, submitted]
  pull_request_review_comment:
    types: [created, edited, deleted]
  pull_request_target:
    types: [assigned, opened, synchronize, reopened]
  push:
    branches: ["main"]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check secrets
        run: |
          echo "检查 secrets 配置..."
          echo "WEBHOOK_UIKIT: ${{ secrets.WEBHOOK_UIKIT != '' }}"
          echo "API_KEY_UIKIT: ${{ secrets.API_KEY_UIKIT != '' }}"
          echo "WEBHOOK_ZIM: ${{ secrets.WEBHOOK_ZIM != '' }}"
          echo "API_KEY_ZIM: ${{ secrets.API_KEY_ZIM != '' }}"
          echo "测试 Variables: ${{ vars.TEST_WEBHOOK }}"

      - name: Load user mapping
        id: mapping
        run: |
          echo "开始加载用户映射..."
          if [ -f .github/configs/user_mapping.yml ]; then
            cat .github/configs/user_mapping.yml
            while IFS=: read -r github_user feishu_id || [ -n "$github_user" ]; do
              [[ $github_user =~ ^#.*$ || -z $github_user ]] && continue
              github_user=$(echo $github_user | tr -d ' "')
              feishu_id=$(echo $feishu_id | tr -d ' "')
              echo "映射: GitHub用户 ${github_user} -> 飞书用户 ${feishu_id}"
              echo "FEISHU_${github_user}=${feishu_id}" >> $GITHUB_ENV
            done < .github/configs/user_mapping.yml
          else
            echo "警告: 用户映射文件不存在"
          fi

      - name: Send notification
        env:
          WEBHOOK_UIKIT: ${{ secrets.WEBHOOK_UIKIT }}
          API_KEY_UIKIT: ${{ secrets.API_KEY_UIKIT }}
          WEBHOOK_ZIM: ${{ secrets.WEBHOOK_ZIM }}
          API_KEY_ZIM: ${{ secrets.API_KEY_ZIM }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_CREATOR: ${{ github.event.pull_request.user.login }}
          PR_ACTION: ${{ github.event.action }}
          PR_MERGED: ${{ github.event.pull_request.merged }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          REVIEW_STATE: ${{ github.event.review.state }}
          EVENT_TYPE: ${{ github.event_name }}
        run: |
          echo "开始处理PR通知..."
          echo "环境变量检查:"
          echo "WEBHOOK_UIKIT 是否设置: ${WEBHOOK_UIKIT:+true}"
          echo "API_KEY_UIKIT 是否设置: ${API_KEY_UIKIT:+true}"
          
          # 打印事件信息
          echo "事件类型: ${{ github.event_name }}"
          echo "事件动作: ${{ github.event.action }}"
          
          # 获取PR信息
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          GITHUB_USER="${{ github.event.pull_request.user.login }}"
          
          echo "PR标题: ${PR_TITLE}"
          echo "PR链接: ${PR_URL}"
          echo "PR创建者: ${GITHUB_USER}"
          
          FEISHU_USER_VAR="FEISHU_${GITHUB_USER}"
          FEISHU_USER_ID="${!FEISHU_USER_VAR:-$GITHUB_USER}"
          echo "对应的飞书用户ID: ${FEISHU_USER_ID}"
          
          # 根据不同事件类型设置状态
          if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
            if [[ "${{ github.event.action }}" == "opened" ]]; then
              STATUS="新建PR"
            elif [[ "${{ github.event.action }}" == "synchronize" ]]; then
              STATUS="更新PR"
            elif [[ "${{ github.event.action }}" == "closed" ]]; then
              if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
                STATUS="合并PR"
              else
                STATUS="关闭PR"
              fi
            fi
          elif [[ "${{ github.event_name }}" == "pull_request_review" ]]; then
            if [[ "${{ github.event.review.state }}" == "approved" ]]; then
              STATUS="审核通过"
            elif [[ "${{ github.event.review.state }}" == "changes_requested" ]]; then
              STATUS="需要修改"
            elif [[ "${{ github.event.review.state }}" == "commented" ]]; then
              STATUS="审核评论"
            fi
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            if [[ "${{ github.event.action }}" == "created" ]]; then
              STATUS="新增评论"
            elif [[ "${{ github.event.action }}" == "edited" ]]; then
              STATUS="编辑评论"
            elif [[ "${{ github.event.action }}" == "deleted" ]]; then
              STATUS="删除评论"
            fi
          fi
          
          # 构建消息内容
          CONTENT="**状态**: ${STATUS}\n**创建者**: <at id=${FEISHU_USER_ID}></at>"
          
          # 添加评论内容（如果有）
          if [[ -n "$COMMENT_BODY" ]]; then
            CONTENT="${CONTENT}\n**评论内容**: ${COMMENT_BODY}"
          fi
          
          # 添加PR描述（如果有）
          if [[ -n "$PR_BODY" ]]; then
            CONTENT="${CONTENT}\n**描述**: ${PR_BODY}"
          fi
          
          # 更新消息卡片中的内容
          MESSAGE_CARD=$(cat << EOF
          {
            "msg_type": "interactive",
            "card": {
              "config": {
                "wide_screen_mode": true
              },
              "header": {
                "title": {
                  "tag": "plain_text",
                  "content": "${PR_TITLE}"
                },
                "template": "blue"
              },
              "elements": [
                {
                  "tag": "div",
                  "text": {
                    "tag": "lark_md",
                    "content": "${CONTENT}"
                  }
                },
                {
                  "tag": "action",
                  "actions": [
                    {
                      "tag": "button",
                      "text": {
                        "tag": "plain_text",
                        "content": "查看 PR"
                      },
                      "url": "${PR_URL}",
                      "type": "default"
                    }
                  ]
                }
              ]
            }
          }
          EOF
          )
          
          echo "获取变更文件列表..."
          changed_files=$(gh api "repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" --jq '.[].filename')
          echo "变更文件列表:"
          echo "$changed_files"
          
          notify_uikit=false
          notify_zim=false
          
          echo "检查文件变更范围..."
          while IFS= read -r file; do
            echo "检查文件: $file"
            if [[ $file == uikit/* ]]; then
              echo "发现 UIKit 相关变更"
              notify_uikit=true
            elif [[ $file == core_products/zim/* ]]; then
              echo "发现 ZIM 相关变更"
              notify_zim=true
            fi
          done <<< "$changed_files"
          
          send_notification() {
            local webhook_url="$1"
            local api_key="$2"
            local team="$3"
            
            echo "准备发送通知到 ${team} 团队..."
            
            # 生成秒级时间戳
            timestamp=$(date +%s)
            echo "时间戳: ${timestamp}"
            
            # 生成签名字符串 (timestamp + "\n" + secret)
            string_to_sign="${timestamp}\n${api_key}"
            
            # 使用 HMAC-SHA256 对空字符串进行签名，然后 Base64 编码
            sign=$(echo -n "" | openssl dgst -sha256 -hmac "$string_to_sign" -binary | openssl base64 -A)
            echo "签名已生成"
            
            # 发送请求
            echo "发送请求到飞书机器人..."
            response=$(curl -X POST \
                 -H "Content-Type: application/json" \
                 -H "X-Lark-Request-Timestamp: ${timestamp}" \
                 -H "X-Lark-Sign: ${sign}" \
                 -d "$MESSAGE_CARD" \
                 "$webhook_url")
            echo "飞书响应: $response"
          }
          
          if [[ $notify_uikit == true && -n $WEBHOOK_UIKIT && -n $API_KEY_UIKIT ]]; then
            echo "发送通知到 UIKit 团队..."
            send_notification "$WEBHOOK_UIKIT" "$API_KEY_UIKIT" "UIKit"
          else
            echo "跳过 UIKit 团队通知"
            [[ $notify_uikit == false ]] && echo "原因: 没有相关变更"
            [[ -z $WEBHOOK_UIKIT ]] && echo "原因: 缺少 WEBHOOK_UIKIT"
            [[ -z $API_KEY_UIKIT ]] && echo "原因: 缺少 API_KEY_UIKIT"
          fi
          
          if [[ $notify_zim == true && -n $WEBHOOK_ZIM && -n $API_KEY_ZIM ]]; then
            echo "发送通知到 ZIM 团队..."
            send_notification "$WEBHOOK_ZIM" "$API_KEY_ZIM" "ZIM"
          else
            echo "跳过 ZIM 团队通知"
            [[ $notify_zim == false ]] && echo "原因: 没有相关变更"
            [[ -z $WEBHOOK_ZIM ]] && echo "原因: 缺少 WEBHOOK_ZIM"
            [[ -z $API_KEY_ZIM ]] && echo "原因: 缺少 API_KEY_ZIM"
          fi